% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/catboost_fit.R
\name{catboost_fit}
\alias{catboost_fit}
\title{Wrapper for catboost.train.}
\usage{
catboost_fit(data = data, target = target, split = split,
  preproc_fun = preproc_fun, params = params, args = NULL,
  metrics = metrics, return_val_preds = FALSE,
  return_model_obj = FALSE, train_on_all_data = FALSE, ...)
}
\arguments{
\item{data}{data.table with all input data.}

\item{split}{Indicator variable with 1 corresponds to observations in validation dataset.}

\item{preproc_fun}{Preprocessing function which takes data.table \code{data}+\code{split}
as input and returns processed data.table with same \code{target} and \code{split} columns.}

\item{params}{1-row data.table with all hyperparameters.}

\item{args}{NULL value for consistency with \code{xgb_fit()}.}

\item{metrics}{Vector of metric functions names.}

\item{return_val_preds}{If \code{TRUE}, predictions for validation data 
will be returned.}

\item{return_model_obj}{If \code{TRUE}, model object will be returned.}

\item{train_on_all_data}{If \code{TRUE}, model will be fitted on all data
(without train/validation split) and model object will be returned.}

\item{...}{Other parameters for \code{catboost.train()}.}

\item{y}{Target variable name (character).}
}
\value{
data.table with optimal number of iterations (implies that we use early stopping)
and all metrics calculated for validation part of the data. It also contains 
predictions for validation data if \code{return_val_preds = TRUE}.
}
\description{
Fit and evaluate catboost model with data.table as input data.
Model are trained (including all preprocessing steps) on train part and
evaluated on validation part according to \code{split} indicator variable.
}
\details{

}
\examples{
# Input data
dt <- as.data.table(mtcars)
# data.table with resamples
splits <- resampleR::cv_base(dt, "hp")
# data.table with all hyperparameters
catboost_grid <- CJ(
    iterations = 1000,
    learning_rate = 0.05,
    depth = c(8, 9),
    loss_function = "RMSE",
    eval_metric = "RMSE",
    random_seed = 42,
    od_type = "Iter",
    # metric_period = 50,
    od_wait = 10,
    use_best_model = TRUE,
    logging_level = "Silent"
) 
# Dumb preprocessing function
# Real function will contain imputation, feature engineering etc.
# with all statistics computed on train folds and applied to validation fold
preproc_fun_example <- function(data) return(data[])
catboost_fit(data = dt,
             target = "hp",
             split = splits[, split_1],
             preproc_fun = preproc_fun_example,
             params = catboost_grid[1, ],
             metrics = c("rmse", "mae"),
             return_val_preds = TRUE)

}
